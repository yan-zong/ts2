//***************************************************************************
// * File:        This file is part of TS2.
// * Created on:  07 Dov 2016
// * Author:      Yan Zong, Xuweu Dai
// *
// * Copyright:   (C) 2016 Northumbria University, UK.
// *
// *              TS2 is free software; you can redistribute it and/or modify it
// *              under the terms of the GNU General Public License as published
// *              by the Free Software Foundation; either version 3 of the
// *              License, or (at your option) any later version.
// *
// *              TS2 is distributed in the hope that it will be useful, but
// *              WITHOUT ANY WARRANTY; without even the implied warranty of
// *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// *              GNU General Public License for more details.
// *
// * Funding:     This work was financed by the Northumbria University Faculty
//                Funded and RDF funded studentship, UK
// ****************************************************************************

#include "IIRFilter.h"
#include "rt_nonfinite.h"
#include "IIR.h"
#include "IIR_terminate.h"
#include "IIR_initialize.h"

#include "Nondirect.h"
#include "IIR_data.h"

dspcodegen_BiquadFilter Hd; // from IIR_data.c

int IIRFilter::iirFilter(int argc, const char * const argv[])
{
    (void)argc;
    (void)argv;

    /* Initialize the application.
       You do not need to do this more than one time. */
    IIR_initialize();

    /* Invoke the entry-point functions.
       You can call entry-point functions multiple times. */
    main_IIR();

    /* Terminate the application.
       You do not need to do this more than one time. */
    IIR_terminate();

    return 0;
}

/* Function Definitions */
double IIRFilter::argInit_real_T(void)
{
  return 0.0;
}

void IIRFilter::main_IIR(void)
{
  double y;

  /* Initialize function 'IIR' input arguments. */
  /* Call the entry-point 'IIR'. */
  y = IIR(argInit_real_T());
}

// from IIR.c
double IIRFilter::IIR(double x)
{
  /* IIR Filters input x and returns output y. */
  /*  MATLAB Code */
  /*  Generated by MATLAB(R) 8.6 and the DSP System Toolbox 9.1. */
  /*  Generated on: 07-Apr-2017 15:41:37 */
  /*  To generate C/C++ code from this function use the codegen command. */
  /*  Type 'help codegen' for more information. */
  return Nondirect_stepImpl(&Hd, x);
}

// from Nondirect.c
double IIRFilter::Nondirect_stepImpl(dspcodegen_BiquadFilter *obj, double varargin_1)
{
  double varargout_1;
  dspcodegen_BiquadFilter *b_obj;
  double stageIn;
  b_obj = obj;

  /* System object Outputs function: dsp.BiquadFilter */
  stageIn = b_obj->cSFunObject.P3_RTP3COEFF[0U] * varargin_1;
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[0] *
    b_obj->cSFunObject.W0_FILT_STATES[0];
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[1] *
    b_obj->cSFunObject.W0_FILT_STATES[1];
  varargout_1 = b_obj->cSFunObject.P1_RTP1COEFF[0] * stageIn;
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[1] *
    b_obj->cSFunObject.W0_FILT_STATES[0];
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[2] *
    b_obj->cSFunObject.W0_FILT_STATES[1];
  b_obj->cSFunObject.W0_FILT_STATES[1] = b_obj->cSFunObject.W0_FILT_STATES[0];
  b_obj->cSFunObject.W0_FILT_STATES[0] = stageIn;
  stageIn = b_obj->cSFunObject.P3_RTP3COEFF[1U] * varargout_1;
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[2] *
    b_obj->cSFunObject.W0_FILT_STATES[2];
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[3] *
    b_obj->cSFunObject.W0_FILT_STATES[3];
  varargout_1 = b_obj->cSFunObject.P1_RTP1COEFF[3] * stageIn;
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[4] *
    b_obj->cSFunObject.W0_FILT_STATES[2];
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[5] *
    b_obj->cSFunObject.W0_FILT_STATES[3];
  b_obj->cSFunObject.W0_FILT_STATES[3] = b_obj->cSFunObject.W0_FILT_STATES[2];
  b_obj->cSFunObject.W0_FILT_STATES[2] = stageIn;
  stageIn = b_obj->cSFunObject.P3_RTP3COEFF[2U] * varargout_1;
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[4] *
    b_obj->cSFunObject.W0_FILT_STATES[4];
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[5] *
    b_obj->cSFunObject.W0_FILT_STATES[5];
  varargout_1 = b_obj->cSFunObject.P1_RTP1COEFF[6] * stageIn;
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[7] *
    b_obj->cSFunObject.W0_FILT_STATES[4];
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[8] *
    b_obj->cSFunObject.W0_FILT_STATES[5];
  b_obj->cSFunObject.W0_FILT_STATES[5] = b_obj->cSFunObject.W0_FILT_STATES[4];
  b_obj->cSFunObject.W0_FILT_STATES[4] = stageIn;
  stageIn = b_obj->cSFunObject.P3_RTP3COEFF[3U] * varargout_1;
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[6] *
    b_obj->cSFunObject.W0_FILT_STATES[6];
  stageIn -= b_obj->cSFunObject.P2_RTP2COEFF[7] *
    b_obj->cSFunObject.W0_FILT_STATES[7];
  varargout_1 = b_obj->cSFunObject.P1_RTP1COEFF[9] * stageIn;
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[10] *
    b_obj->cSFunObject.W0_FILT_STATES[6];
  varargout_1 += b_obj->cSFunObject.P1_RTP1COEFF[11] *
    b_obj->cSFunObject.W0_FILT_STATES[7];
  b_obj->cSFunObject.W0_FILT_STATES[7] = b_obj->cSFunObject.W0_FILT_STATES[6];
  b_obj->cSFunObject.W0_FILT_STATES[6] = stageIn;
  return varargout_1;
}



