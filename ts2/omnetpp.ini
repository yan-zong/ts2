[General]
network = Network
tkenv-image-path = ../../images;

# ned-path = ./;../../MiXiM/src/base;../../MiXiM/src/modules;../../MiXiM/examples;../../MiXiM/examples/ieee802154Narrow;
ned-path = ./

# simulation time limit
sim-time-limit =1000s
**.mnode.clock.sim_time_limit =1000	# simulation time limit [s]
**.rnode[*].clock.sim_time_limit =1000	# simulation time limit [s]
**.snode[*].clock.sim_time_limit =1000	# simulation time limit [s]

**.cmdenv-ev-output = true
cmdenv-event-banners = true
cmdenv-module-messages = false
cmdenv-express-mode = true
  # cmdenv-runs-to-execute = 1




record-eventlog = false
#output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"

#output-vector-file = measure.vec
output-vector-file = ./myresult/${configname}-${runnumber}.vec
output-scalar-file = ./myresult/measure.sca
output-scalar-file-append=true


##########################################################
#			Parameters for Master                        #
##########################################################
**.mnode.clock.offset = 0	#offset initial value	[s]
**.mnode.clock.drift = 0	#drift 	initial value	[ppm]
**.mnode.clock.sigma1 = 0  # drift noise  std
**.mnode.clock.sigma2 = 0  # offset noise  std
**.mnode.clock.sigma3 = 0  #measurement noise std
**.mnode.clock.u3= 0#1E-5       #measurement noise mean
**.mnode.clock.alpha = 1   #滑动滤波参数
**.mnode.clock.beta =1
#**.snode[*].ptpcore.node.s1 = 1E-9  # drift noise  std
#**.snode[*].ptpcore.node.s2 = 1E-7  # offset noise  std
#**.snode[*].ptpcore.node.s3 = 1E-8  #measurement noise std
**.mnode.clock.Tcamp = 30.51757813E-6 #30.51757813E-6   #clock update period (clcok sampling interval)
**.mnode.clock.Tsync =0.1  #10Tsync,去掉统计记录值的前10个点
**.mnode*.core.Tsync = 1	# synchronization interval
**.mnode.clock.RegisterThreshold = 1
# duration of one superframe
**.mnode.clock.FrameDuration = 1
**.mnode.clock.slotDuration = 0ms
**.mnode.clock.ScheduleOffset = 0ms
**.mnode.clock.delay = 0ms
**.mnode.clock.AdjustParameter = 0

##########################################################
#			Parameters for Slave                        #
##########################################################
**.snode[*].clock.offset = 0E-3	#offset initial value	[s]
**.snode[*].clock.drift = 1E-5	#drift 	initial value	[ppm]
**.snode[*].clock.sigma1 = 1E-9  # drift noise  std
**.snode[*].clock.sigma2 = 1E-7  # offset noise  std
#**.snode[*].clock.sigma3 = 1E-6  #measurement noise std
**.snode[*].clock.u3= 0#1E-5       #measurement noise mean
**.snode[*].clock.alpha = 1   #滑动滤波参数
**.snode[*].clock.beta =1
#**.snode[*].ptpcore.node.s1 = 1E-9  # drift noise  std
#**.snode[*].ptpcore.node.s2 = 1E-7  # offset noise  std
#**.snode[*].ptpcore.node.s3 = 1E-8  #measurement noise std
**.snode[*].clock.Tcamp = 30.51757813E-6  # 30.51757813E-6 #1E-2   #clock update period (clcok sampling interval)	
**.snode[*].core.ptpslave.Tcamp = 1E-2  #t2、t3之间的处理时延（ 0，0.5*Tcamp）
**.snode[*].core.ptpslave.rate =54E6     #计算包的传输速率=包长/rate
**.snode[*].core.buffertx.rate =54E6  	#rate 		[bit/s]
**.snode[*].core.buffertx.latenza = 0   #latenza 			[s]
**.snode[*].core.bufferrx.rate =54E6	#rate 		[bit/s]
**.snode[*].core.bufferrx.latenza = 0 	#latenza 			[s]
**.snode[*].core.manager.Tciclico = 0	#Periodo messaggi ciclici[s]
**.snode[*].core.manager.Byte = 48  	#Durata in byte dei pacchetti 	[Byte]
**.snode[*].core.manager.Number = 1	#numero di pacchetti di un burst
#**.snode[*].ptpcore.node.Tsync = 10#		#DEVE ESSERE UGUALE A test.Tsync
#**.snode[*].ptpcore.node.nsync = 10#
**.snode[*].clock.Tsync = 0.1  #10Tsync,去掉统计记录值的前10个点
**.snode[*].clock.RegisterThreshold = 1
# duration of one superframe
**.snode[*].clock.FrameDuration = 1
**.snode[*].clock.slotDuration = 1.408ms
**.snode[*].clock.ScheduleOffset = 100ms
**.snode[*].clock.delay = 1.408ms
**.snode[*].clock.AdjustParameter = 0.8

##########################################################
#			Parameters for Relay                        #
##########################################################
**.rnode[*].clock.offset = 0E-3	# offset initial value [s]
**.rnode[*].clock.drift = 1E-4 	# drift	initial value [ppm]
**.rnode[*].clock.sigma1 = 1E-9  # drift noise  std

**.rnode[0].clock.sigma2 = 1E-5	# offset noise  std
**.rnode[1].clock.sigma2 = 1E-6 # offset noise  std
**.rnode[2].clock.sigma2 = 1E-7	# offset noise  std
**.rnode[3].clock.sigma2 = 1E-8 # offset noise  std

**.rnode[*].clock.sigma3 = 1E-6  # measurement noise std
**.rnode[*].clock.u3= 0#1E-5       #measurement noise mean
**.rnode[*].clock.alpha = 1   #滑动滤波参数
**.rnode[*].clock.beta =1
#**.snode[*].ptpcore.node.s1 = 1E-9  # drift noise  std
#**.snode[*].ptpcore.node.s2 = 1E-7  # offset noise  std
#**.snode[*].ptpcore.node.s3 = 1E-8  #measurement noise std
**.rnode[*].clock.Tcamp =  30.51757813E-6  # 30.51757813E-6 #1E-2   #clock updatetime
**.rnode[*].core.RelaySlave.Tcamp = 1E-2  #t2、t3之间的处理时延（ 0，0.5*Tcamp）
**.rnode[*].core.RelaySlave.rate =54E6     #计算包的传输速率=包长/rate
**.rnode[*].core.RelayBuffer.rate =54E6  	#rate 		[bit/s]
**.rnode[*].core.RelayBuffer.latenza = 0   #latenza 			[s]
#          **.snode[*].ptpcore.bufferrx.rate =54E6	#rate 		[bit/s]
#          **.snode[*].ptpcore.bufferrx.latenza = 0 	#latenza 			[s]
**.rnode[*].core.manager.Tciclico = 0	#Periodo messaggi ciclici[s]
**.rnode[*].core.manager.Byte = 48  	#Durata in byte dei pacchetti 	[Byte]
**.rnode[*].core.manager.Number = 1	#numero di pacchetti di un burst
#**.snode[*].ptpcore.node.Tsync = 10#		#DEVE ESSERE UGUALE A test.Tsync
#**.snode[*].ptpcore.node.nsync = 10#
**.rnode[*].clock.Tsync =0.1  #10Tsync,去掉统计记录值的前10个点
**.rnode[*].core.RelayMaster.RandomValue = 0.1
**.rnode[*].clock.RegisterThreshold = 1
# duration of one superframe
**.rnode[*].clock.FrameDuration = 1
**.rnode[*].clock.slotDuration = 1.408ms #1.408ms
**.rnode[*].clock.ScheduleOffset = 100ms
#**.rnode[].clock.ScheduleOffset = 400ms
**.rnode[*].clock.delay = 1.408ms	# transmission delay
**.rnode[*].clock.AdjustParameter = 0.1




#------------------------------------------------------------------------
# Parametri della sorgente
#------------------------------------------------------------------------
#TimeSyn.source.wlen = 1500#
#TimeSyn.source.T = 2E-3#
#TimeSyn.source.d = 0.3#
#TimeSyn.source.m1 = 1.7#
#TimeSyn.source.m2 = 1.7#

num-rngs = 2
**.rng-0 = 0
**.rng-1 = 1
#**.rng-2 = 2
repeat =20
seed-0-mt =100 #${runnumber}
#seed-2-mt = ${runnumber}
seed-1-mt = 9  # let RNG 1's seed is always 9




##########################################################
#			Playground parameters                        #
##########################################################
tkenv-default-config = 
*.**.coreDebug = false
*.**.debug = false
*.playgroundSizeX = 200m
*.playgroundSizeY = 200m
*.playgroundSizeZ = 0m
*.numHosts = 0	# useless in the ts2 
*.numMaster = 1	# determine the number of master in the network
*.numSlave = 0	# determine the number of slave in the network
*.numRelay = 4	# determine the number of relay in the network


##########################################################
#			WorldUtility parameters                      #
##########################################################
*.world.useTorus = false
*.world.bitrate = 250000

##########################################################
#			         channel parameters                  #
##########################################################
*.connectionManager.sendDirect = false
*.connectionManager.pMax = 1.1mW
*.connectionManager.sat = -100dBm
*.connectionManager.alpha = 2.5
*.connectionManager.carrierFrequency = 2.4E+9Hz

##########################################################
#			PhyLayer parameters for CSMA		         #
##########################################################
# **.nic.phy.usePropagationDelay = false
# **.nic.phy.analogueModels = xmldoc("config.xml")
# **.nic.phy.sensitivity = -100dBm
# **.nic.phy.maxTXPower = 1.1mW
# **.nic.phy.initialRadioState = 0
# **.nic.phy.useThermalNoise = true

##########################################################
#			PhyLayer parameters for TDMA		         #
##########################################################
**.nic.phy.headerLength = 8bit
**.nic.phy.usePropagationDelay = false
**.nic.phy.thermalNoise = -100dBm
**.nic.phy.useThermalNoise = true
**.nic.phy.analogueModels = xmldoc("config.xml")
**.nic.phy.decider = xmldoc("config.xml")
**.nic.phy.maxTXPower = 100.0mW
**.nic.phy.sensitivity = -84dBm
**.nic.phy.initialRadioState = 0

##########################################################
#			MAC parameters for CSMA				         #
##########################################################
# **.nic.mac.notAffectedByHostState = true

##########################################################
#			MAC parameters for TDMA				         #
##########################################################
**.**.nic.mac.headerLength = 16bit
# the length of the queue - if exceeded, new packets are dropped
**.**.nic.mac.queueLength = 1E6
**.**.nic.mac.bitrate = 250000 bps
**.**.nic.mac.txPower = 100
**.**.nic.mac.defaultChannel = 0
**.**.nic.mac.stats = true
# duration of one slot
**.**.nic.mac.slotDuration = 1.376ms
**.**.nic.mac.trace = true

##########################################################
#			NETW layer parameters				         #
##########################################################
**.netwl.headerLength = 16bit

##########################################################
#			APPL layer parameters				         #
##########################################################
**.appl.burstSize = 0
**.appl.headerLength = 128bit

##########################################################
#			ArpHost module parameters			         #
##########################################################
# Fpr simplicity, keep the address of all the layers the SAME
*.mnode*.arp.offset = 1000
*.mnode*.core.masterAddrOffset=1000

#ToDo: need to configrue the slave node address
*.snode*.arp.offset = 20	
*.snode*.core.ptpslave.slaveAddrOffset=20

*.rnode[*].arp.offset = 2000
*.rnode[*].core.RelayMaster.masterAddrOffset=2000
*.rnode[*].core.RelaySlave.slaveAddrOffset=2000

##########################################################
#			Mobility parameters					         #
##########################################################
**.mobilityType = "ConstSpeedMobility"

**.mobility.initFromDisplayString = false
**.mobility.initialZ = 0m

*.mnode*.mobility.initialX = 100m
*.mnode*.mobility.initialY = 100m

*.snode[0].mobility.initialX = 20m
*.snode[0].mobility.initialY = 20m
*.snode[1].mobility.initialX = 30m
*.snode[1].mobility.initialY = 30m

*.rnode[0].mobility.initialX = 20m
*.rnode[0].mobility.initialY = 100m
*.rnode[1].mobility.initialX = 180m
*.rnode[1].mobility.initialY = 100m

*.rnode[2].mobility.initialX = 100m
*.rnode[2].mobility.initialY = 20m
*.rnode[3].mobility.initialX = 100m
*.rnode[3].mobility.initialY = 180m

*.mnode*.mobility.speed = 0
*.snode[*].mobility.speed = 0
*.rnode[*].mobility.speed = 0

##########################################################
#			Battery parameters					         #
##########################################################
**.battery.nominal = 99999mAh
**.battery.capacity = 99999mAh
**.battery.voltage = 3.3V
**.battery.resolution = 0.1s
**.battery.publishDelta = 1
**.battery.publishTime = 0
**.battery.numDevices = 1

**.batteryStats.detail = false
**.batteryStats.timeSeries = false



[Config sigma3Runs] 
# measurement noise
description="Timestamping uncertainty of the slave clock"
#repeat =20   
#num-rngs = 3
#**.rng-0 = 0
#**.rng-1 = 1
#**.rng-2 = 2
#seed-0-mt = ${runnumber} 
#seed-0-mt = ${0,1,2,3,4,5,6,7,8,9} 
#seed-1-mt = 9  # let RNG 1's seed is always 9
#seed-2-mt = ${runnumber}
**.snode[*].clock.sigma3 =${2E-8,4E-8,6E-8,8E-8,1E-7,2E-7,4E-7,6E-7,8E-7,1E-6,2E-6,4E-6,6E-6,8E-6,\
                               1E-5,2E-5,4E-5,6E-5,8E-5,1E-4,2E-4,4E-4,6E-4,8E-4,1E-3,2E-3,4E-3,6E-3,8E-3,1E-2}
#TimeSyn.slave.node.s3 =  ${sigm3=1E-7,2E-7,4E-7,6E-7,8E-7,1E-6,2E-6,4E-6,6E-6,8E-6,\
 #                               1E-5,2E-5,4E-5,6E-5,8E-5,1E-4,2E-4,4E-4,6E-4,8E-4,1E-3}
#1E-8),sqrt(2)*(1E-6)
#{1E-8,2E-8,4E-8,6E-8,8E-8,1E-7,2E-7,4E-7,6E-7,8E-7,1E-6,2E-6,4E-6,6E-6,8E-6,\
                              # 1E-5,2E-5,4E-5,6E-5,8E-5,1E-4,2E-4,4E-4,6E-4,8E-4,1E-3,2E-3,4E-3,6E-3,8E-3,1E-2}
#${1E-7,1E-6,1E-5,1E-4,1E-3}








#################################################
# Test 1
# these tests produce the usage statistics of the channel
# for different configurations. Usage statistics means
# how much of the channels possible maximum capacity is
# used at which amount of generated traffic.
# 
# The results of this tests are visualized by "Test1.anf"
# and show plots of the generated traffic against the received
# traffic where both values are normalized against bitrate
# and simulation time.
##################################################
[Config Test1-A]
description = "increasing number of hosts, unbursted, with queue"
# *.playgroundSizeX = 10m
# *.playgroundSizeY = 10m
# *.numHosts = ${2..40 step 2}
# *.node[*].mobility.initialX = uniform(0m, 10m)
# *.node[*].mobility.initialY = uniform(0m, 10m)
# *.node[*].mobility.initialZ = uniform(0m, 10m)
*.mnode*.mobility.speed = 0
*.snode[*].mobility.speed = 10mps

**.netwl.packetsPerPacketTime = 0.1





[Config Test1-B]
description = "increasing send rate per host, unbursted, with queue"
*.playgroundSizeX = 10m
*.playgroundSizeY = 10m
*.numHosts = 10
*.?node[*].mobility.initialX = uniform(0m, 10m)
*.?node[*].mobility.initialY = uniform(0m, 10m)
*.?node[*].mobility.initialZ = uniform(0m, 10m)
*.?node[*].mobility.speed = 0
**.netwl.packetsPerPacketTime = ${0.02..0.4 step 0.02}
**.netwl.burstSize = 1
**.mac.queueLength = 100

[Config Test1-C]
extends = Test1-B
description = "increasing send rate per host, bursted, with queue"
**.netwl.burstSize = 3

[Config Test1-D]
extends = Test1-C
description = "increasing send rate per host, bursted, without queue"
**.mac.queueLength = 0

[Config Test1-E]
extends = Test1-B
description = "increasing send rate per host, unbursted, without queue"
**.mac.queueLength = 0


##################################################
# Test 2
# These test configurations are meant to show the effect
# of MAC-ACKS on the usage of the channel with increasing
# distance between the hosts.
# Test2-C further shows the effect of the hidden station
# problem on CSMA.
#
# The results can be visualized by "Test2.anf" and show
# plots of channel usage at different distances.
##################################################
[Config Test2-A]
description = "one sending host moving towards sink, with mac-acks"
sim-time-limit = 300s
#record-eventlog = true
*.playgroundSizeX = 500m
*.playgroundSizeY = 500m
*.numHosts = 2
*.?node[0].mobility.initialX = 350m
*.?node[0].mobility.initialY = 250m
*.?node[1].mobility.initialX = 350m - ${dist=110..300 step 5}m #${dist=40..160 step 40, 180..220 step 2, 230,240}m
*.?node[1].mobility.initialY = 250m
*.?node[*].mobility.speed = 0

*.?node[0].netwl.burstSize = 0
*.?node[1].netwl.burstSize = 1
*.?node[1].netwl.destination = 0
#*.node[1].nic.phy.coreDebug = true
**.netwl.packetsPerPacketTime = 0.25

*.world.bcTraffic = false

[Config Test2-B]
extends = Test2-A
description = "one sending host moving towards sink, without mac-acks"
*.?node[1].netwl.destination = 0
*.?node[*].nic.mac.useMACAcks = false
*.world.bcTraffic = false

[Config Test2-C]
extends = Test2-A
description = "one sending host stationary in range of sink (hidden station), \
			   one host moving towards sink and stationary sender,\
			   with mac ACKS"
*.numHosts = 3
**.netwl.packetsPerPacketTime = 0.125
*.?node[2].mobility.initialX = 480m
*.?node[2].mobility.initialY = 250m
*.?node[2].netwl.burstSize = 1
*.?node[2].netwl.destination = 0
*.?node[1].netwl.destination = 0

######################################################
# Test 3
# This tests is meant to show that CSMA uses exponential backoffs.
# This is done by increasing the number of hosts in the network exponentially.
# While the average backoff duration of each hosts should increase
# exponentially, the average number of backoffs should increase linearly.
#
# The results of this tests are visualized by "Test3.anf".
######################################################
[Config Test3]
description = "quadratic increasing number of hosts results in linear increase of backoffs"
sim-time-limit = ${numHosts}s
*.playgroundSizeX = 10m
*.playgroundSizeY = 10m
*.numHosts = ${numHosts=2,4,8,16,32,64,128,256}
*.?node[*].mobility.initialX = uniform(0m, 10m)
*.?node[*].mobility.initialY = uniform(0m, 10m)
*.?node[*].mobility.initialZ = uniform(0m, 10m)
*.?node[*].mobility.speed = 0
**.netwl.packetsPerPacketTime = 1/${numHosts}
*.?node[*].nic.mac.macMinBE = 1
*.?node[*].nic.mac.macMaxBE = 8
*.?node[*].nic.mac.macMaxCSMABackoffs = 20
*.?node[*].nic.mac.aUnitBackoffPeriod = 0.1s
*.connectionManager.sendDirect = true
**.netwl.burstSize = 2
