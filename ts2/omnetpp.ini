[General]
network = Network
tkenv-image-path = ../../images;

ned-path = ./

# simulation time limit
sim-time-limit = 60.5s

**.cmdenv-ev-output = true
cmdenv-event-banners = true
cmdenv-module-messages = false
cmdenv-express-mode = true
# event log
record-eventlog = false
# simulation data files
output-vector-file = ./myresult/${configname}-${runnumber}.vec
output-scalar-file = ./myresult/measure.sca
output-scalar-file-append = true

##########################################################
#			Parameters for Master                        #
##########################################################
**.mnode.clock.offset = 0	# offset initial value [s]
**.mnode.clock.drift = 0	# drift initial value [ppm] 
**.mnode.clock.sigma1 = 0	# drift noise std
**.mnode.clock.sigma2 = 0	# offset noise std
**.mnode.clock.sigma3 = 0	# measurement noise std
**.mnode.clock.u3= 0	# measurement noise mean
**.mnode.clock.alpha = 0	# the correction parameter of clock offset
**.mnode.clock.beta = 0	# the correction parameter of clock skew 
**.mnode.clock.tau_0 = 30.51757813E-6	# clock update period
**.mnode.clock.Threshold = 1	# threshold
**.mnode.clock.pulseDuration = 0s
**.mnode.clock.ScheduleOffset = 0s	# scheduled offset
**.mnode.clock.tau = 0s	# transmission delay
**.mnode.clock.CorrectionAlgorithm = 0	# null 
**.mnode.clock.varepsilon = 0	# for classic PCO

##########################################################
#			Parameters for Slave                        #
##########################################################
# **.snode[*].clock.offset = 0	# offset initial value
# **.snode[*].clock.drift = 0	# drift initial value
# **.snode[*].clock.sigma1 = 0	# drift noise std
# **.snode[*].clock.sigma2 = 0	# offset noise std
# **.snode[*].clock.sigma3 = 0	# measurement noise std
# **.snode[*].clock.u3= 0	# measurement noise mean
# **.snode[*].clock.alpha = 1	# the correction parameter of clock offset
# **.snode[*].clock.beta = 1	# the correction parameter of clock skew
**.snode[*].clock.tau_0 = 30.51757813E-6	#clock update period	
**.snode[*].clock.Threshold = 1
**.snode[*].clock.pulseDuration = 0ms
**.snode[*].clock.ScheduleOffset = 0ms
**.snode[*].clock.tau = 0.48ms
# **.snode[*].clock.CorrectionAlgorithm = 1
# **.snode[*].clock.varepsilon = 0.2	# for classic PCO

##########################################################
#			Parameters for Relay                        #
##########################################################
# **.rnode[*].clock.offset = 0E-3	# offset initial value [s]
# **.rnode[*].clock.drift = 1E-4	# drift	initial value [ppm]
# **.rnode[0].clock.sigma1 = 1E-8	# drift noise  std
# **.rnode[1].clock.sigma1 = 1E-7	# drift noise  std
# **.rnode[0].clock.sigma2 = 1E-7	# offset noise  std
# **.rnode[1].clock.sigma2 = 1E-6	# offset noise  std
# **.rnode[*].clock.sigma3 = 0	# measurement noise std
# **.rnode[*].clock.u3= 0	# measurement noise mean
# **.rnode[*].clock.alpha = 1	# the correction parameter of clock offset
# **.rnode[*].clock.beta = 1	# the correction parameter of clock skew
**.rnode[*].clock.tau_0 = 30.51757813E-6	# clock update period
**.rnode[*].core.manager.Tciclico = 0	#Periodo messaggi ciclici[s]
**.rnode[*].core.manager.Byte = 48  	#Durata in byte dei pacchetti 	[Byte]
**.rnode[*].core.manager.Number = 1	#numero di pacchetti di un burst
**.rnode[*].clock.Threshold = 1
**.rnode[*].clock.pulseDuration = 0ms
**.rnode[*].clock.ScheduleOffset = 0ms
**.rnode[*].clock.tau = 0.48ms	# transmission delay
# **.rnode[*].clock.CorrectionAlgorithm = 1
# **.rnode[*].clock.varepsilon = 0.2	# for classic PCO

num-rngs = 2
**.rng-0 = 0
**.rng-1 = 1
#**.rng-2 = 2
repeat = 1000
seed-0-mt =100 #${runnumber}
#seed-2-mt = ${runnumber}
seed-1-mt = 9  # let RNG 1's seed is always 9


##########################################################
#			Playground parameters                        #
##########################################################
tkenv-default-config = 
*.**.coreDebug = false
*.**.debug = false
*.playgroundSizeX = 800m
*.playgroundSizeY = 800m
*.playgroundSizeZ = 0m
*.numHosts = 0	# useless in the ts2 
*.numMaster = 1	# determine the number of master in the network
*.numSlave = 1	# determine the number of slave in the network
*.numRelay = 0	# determine the number of relay in the network

##########################################################
#			WorldUtility parameters                      #
##########################################################
*.world.useTorus = false
*.world.bitrate = 250000

##########################################################
#			channel parameters                  		 #
##########################################################
*.connectionManager.sendDirect = false
*.connectionManager.pMax = 1.1mW
*.connectionManager.sat = -100dBm
*.connectionManager.alpha = 2.5
*.connectionManager.carrierFrequency = 2.4E+9Hz

##########################################################
#			PhyLayer parameters for TDMA		         #
##########################################################
**.nic.phy.headerLength = 48bit	# 6 bytes for physical layer (PCO)
**.nic.phy.usePropagationDelay = false
**.nic.phy.thermalNoise = -100dBm
**.nic.phy.useThermalNoise = true
**.nic.phy.analogueModels = xmldoc("config.xml")
**.nic.phy.decider = xmldoc("config.xml")
**.nic.phy.maxTXPower = 100.0mW
**.nic.phy.sensitivity = -84dBm
**.nic.phy.initialRadioState = 0

##########################################################
#			Timestamp							         #
##########################################################
**.**.timestamp.useReferenceClock = false

##########################################################
#			MAC parameters for TDMA				         #
##########################################################
**.**.nic.mac.headerLength = 104bit	# 13 bytes for mac layer (PCO)
# the length of the queue - if exceeded, new packets are dropped
**.**.nic.mac.queueLength = 1E6
**.**.nic.mac.bitrate = 250000 bps
**.**.nic.mac.txPower = 100
**.**.nic.mac.defaultChannel = 0
**.**.nic.mac.stats = true
# duration of one slot
**.**.nic.mac.slotDuration = 1.376ms
**.**.nic.mac.trace = true

##########################################################
#			NETW layer parameters				         #
##########################################################
**.netwl.headerLength = 0bit	

##########################################################
#			APPL layer parameters				         #
##########################################################
**.appl.burstSize = 0
**.appl.headerLength = 128bit

##########################################################
#			ArpHost module parameters			         #
##########################################################
# Fpr simplicity, keep the address of all the layers the SAME
*.mnode*.arp.offset = 1000
*.mnode*.core.masterAddrOffset=1000

*.rnode[*].arp.offset = 2000
*.rnode[*].core.RelayMaster.masterAddrOffset=2000
*.rnode[*].core.RelaySlave.slaveAddrOffset=2000

*.snode[*].arp.offset = 3000
*.snode[*].core.slaveAddrOffset = 3000

##########################################################
#			Mobility parameters					         #
##########################################################
**.mobilityType = "ConstSpeedMobility"

**.mobility.initFromDisplayString = false
**.mobility.initialZ = 0m

*.mnode*.mobility.initialX = 220m
*.mnode*.mobility.initialY = 220m

*.snode[0].mobility.initialX = 200m
*.snode[0].mobility.initialY = 200m

# *.snode[1].mobility.initialX = 200m
# *.snode[1].mobility.initialY = 240m

# *.snode[2].mobility.initialX = 240m
# *.snode[2].mobility.initialY = 240m

# *.snode[3].mobility.initialX = 240m
# *.snode[3].mobility.initialY = 200m

*.rnode[0].mobility.initialX = 200m
*.rnode[0].mobility.initialY = 200m

*.rnode[1].mobility.initialX = 200m
*.rnode[1].mobility.initialY = 240m

*.rnode[2].mobility.initialX = 240m
*.rnode[2].mobility.initialY = 240m

*.rnode[3].mobility.initialX = 240m
*.rnode[3].mobility.initialY = 200m

*.mnode*.mobility.speed = 0
*.snode[*].mobility.speed = 0
*.rnode[*].mobility.speed = 0

##########################################################
#			Battery parameters					         #
##########################################################
**.battery.nominal = 99999mAh
**.battery.capacity = 99999mAh
**.battery.voltage = 3.3V
**.battery.resolution = 0.1s
**.battery.publishDelta = 1
**.battery.publishTime = 0
**.battery.numDevices = 1

**.batteryStats.detail = false
**.batteryStats.timeSeries = false

[Config ClassicIdenticalPCO] 
description = "Simulate the performance of classic PCO with identical frequency in single-hop wireless sensor networks"
# this simularion is to the SSCE of classic PCO, and the
# network topology is made up of one master node, 
# three relay nodes and ten slave nodes.

# configuration of slave drifting clock 
**.snode[*].clock.sigma1 = 0	# drift noise std
**.snode[*].clock.drift = 0	# drift initial value

**.snode[*].clock.sigma2 = 0	# offset noise std
**.snode[0].clock.offset = -4E-1	# offset initial value
**.snode[1].clock.offset = -4E-1	# offset initial value

**.snode[*].clock.sigma3 = 0	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of relay drifting clock 
**.rnode[*].clock.sigma1 = 0  # drift noise  std
**.rnode[*].clock.drift = 0	# drift	initial value [ppm]

**.rnode[*].clock.sigma2 = 0	# offset noise  std
**.rnode[3].clock.offset = 4E-1	# offset initial value [s]
**.rnode[2].clock.offset = 4E-1	# offset initial value [s]
**.rnode[1].clock.offset = 4E-1	# offset initial value [s]
**.rnode[0].clock.offset = 4E-1	# offset initial value [s]

**.rnode[*].clock.sigma3 = 0	# measurement noise std
**.rnode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 1
**.rnode[*].clock.CorrectionAlgorithm = 1

**.**.clock.refractory = 1E-4	# refractory period [s]
# **.mnode.clock.refractory = 1E-5	# refractory period [s]
# **.rnode[*].clock.refractory = 1E-5	# refractory period [s]
# **.snode[*].clock.refractory = 1E-5	# refractory period [s]

**.snode[*].clock.varepsilon = 5E-2	# for classic PCO coupling strength [s]
**.rnode[*].clock.varepsilon = 5E-2	#  for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 0	# the correction parameter of clock offset
**.snode[*].clock.beta = 0	# the correction parameter of clock skew

**.rnode[*].clock.alpha = 0	# the correction parameter of clock offset
**.rnode[*].clock.beta = 0	# the correction parameter of clock skew

[Config FreeRunningClassicNonidenticalPCO] 
description = "Simulate the free-running state of classic nonidentical PCO in single-hop wireless sensor networks"
# this simularion is to the SSCE of classic PCO, and the
# network topology is made up of one master node, 
# three relay nodes and ten slave nodes.

# configuration of slave drifting clock 
**.snode[*].clock.sigma1 = 1E-8	# drift noise std
**.snode[*].clock.drift = 1E-4	# drift initial value

**.snode[*].clock.sigma2 = 1E-7	# offset noise std
**.snode[*].clock.offset = 1E-2	# offset initial value

**.snode[*].clock.sigma3 = 0	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 0
**.rnode[*].clock.CorrectionAlgorithm = 0

**.mnode.clock.refractory = 0	# refractory period [s]
**.rnode[*].clock.refractory = 0	# refractory period [s]
**.snode[*].clock.refractory = 0	# refractory period [s]

**.snode[*].clock.varepsilon = 0	# for classic PCO coupling strength [s]
**.rnode[*].clock.varepsilon = 0	#  for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 0	# the correction parameter of clock offset
**.snode[*].clock.beta = 0	# the correction parameter of clock skew

**.rnode[*].clock.alpha = 0	# the correction parameter of clock offset
**.rnode[*].clock.beta = 0	# the correction parameter of clock skew

[Config InteractionClassicNonidenticalPCO] 
description = "Simulate the interaction state of classic nonidentical PCO in single-hop wireless sensor networks"
# this simularion is to the SSCE of classic PCO, and the
# network topology is made up of one master node, 
# three relay nodes and ten slave nodes.

# configuration of slave drifting clock 
**.snode[*].clock.sigma1 = 1E-9	# drift noise std
**.snode[*].clock.drift = 1E-4	# drift initial value

**.snode[*].clock.sigma2 = 1E-7	# offset noise std
**.snode[*].clock.offset = 1E-3	# offset initial value

**.snode[*].clock.sigma3 = 0	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 1
**.rnode[*].clock.CorrectionAlgorithm = 1

**.**.clock.refractory = 1E-3	# refractory period [s]
# **.mnode.clock.refractory = 1E-4	# refractory period [s]
# **.rnode[*].clock.refractory = 1E-4	# refractory period [s]
# **.snode[*].clock.refractory = 1E-4	# refractory period [s]

**.**.clock.varepsilon = 2E-2	# for classic PCO coupling strength [s]
# **.snode[*].clock.varepsilon = 2E-2	# for classic PCO coupling strength [s]
# **.rnode[*].clock.varepsilon = 2E-2	#  for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 0	# the correction parameter of clock offset
**.snode[*].clock.beta = 0	# the correction parameter of clock skew

**.rnode[*].clock.alpha = 0	# the correction parameter of clock offset
**.rnode[*].clock.beta = 0	# the correction parameter of clock skew

[Config ClassicIdenticalPCO4Multi-hopWSNs] 
description = "Simulate the performance of classic PCO with identical frequency in multi-hop wireless sensor networks"
# this simularion is to the SSCE of classic PCO, and the
# network topology is made up of one master node, 
# three relay nodes and ten slave nodes.

# configuration of slave drifting clock 
**.snode[*].clock.sigma1 = 0	# drift noise std
**.snode[*].clock.drift = 0	# drift initial value

**.snode[*].clock.sigma2 = 0	# offset noise std
**.snode[0].clock.offset = 0	# offset initial value
**.snode[1].clock.offset = 0	# offset initial value

**.snode[*].clock.sigma3 = 0	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of relay drifting clock 
**.rnode[*].clock.sigma1 = 0  # drift noise  std
**.rnode[*].clock.drift = 0	# drift	initial value [ppm]

**.rnode[*].clock.sigma2 = 0	# offset noise  std
**.rnode[0].clock.offset = 1E-2	# offset initial value [s]
**.rnode[1].clock.offset = 1E-2	# offset initial value [s]
**.rnode[2].clock.offset = 1E-3	# offset initial value [s]

**.rnode[*].clock.sigma3 = 0	# measurement noise std
**.rnode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 1
**.rnode[*].clock.CorrectionAlgorithm = 1

**.**.clock.refractory = 1E-3	# refractory period [s]
# **.mnode.clock.refractory = 1E-5	# refractory period [s]
# **.rnode[*].clock.refractory = 1E-5	# refractory period [s]
# **.snode[*].clock.refractory = 1E-5	# refractory period [s]

**.snode[*].clock.varepsilon = 2E-2	# for classic PCO coupling strength [s]
**.rnode[*].clock.varepsilon = 2E-2	#  for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 0	# the correction parameter of clock offset
**.snode[*].clock.beta = 0	# the correction parameter of clock skew

**.rnode[*].clock.alpha = 0	# the correction parameter of clock offset
**.rnode[*].clock.beta = 0	# the correction parameter of clock skew

[Config PkCO4Single-hopWSN] 
description = "Simulate the PkCOs in single-hop wireless sensor networks"
# this simulation is to the SSCE of classic PCO, and the
# network topology is made up of master , and slave (or relay) nodes

# configuration of slave drifting clock 
**.snode[0].clock.sigma1 = 1E-9	# drift noise std
**.snode[0].clock.drift = 1E-5	# drift initial value

**.snode[0].clock.sigma2 = 1E-7	# offset noise std
**.snode[0].clock.offset = 333E-3	# offset initial value

**.snode[1].clock.sigma1 = 1E-8	# drift noise std
**.snode[1].clock.drift = 1E-5	# drift initial value

**.snode[1].clock.sigma2 = 1E-6	# offset noise std
**.snode[1].clock.offset = 127E-3	# offset initial value

**.snode[2].clock.sigma1 = 1E-8	# drift noise std
**.snode[2].clock.drift = 1E-5	# drift initial value

**.snode[2].clock.sigma2 = 1E-6	# offset noise std
**.snode[2].clock.offset = 127E-3	# offset initial value

**.snode[3].clock.sigma1 = 1E-8	# drift noise std
**.snode[3].clock.drift = 1E-5	# drift initial value

**.snode[3].clock.sigma2 = 1E-6	# offset noise std
**.snode[3].clock.offset = 127E-3	# offset initial value

**.snode[*].clock.sigma3 = 1E-8	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of slave drifting clock 
**.rnode[0].clock.sigma1 = 1E-9	# drift noise std
**.rnode[0].clock.drift = 1E-5	# drift initial value

**.rnode[0].clock.sigma2 = 1E-7	# offset noise std
**.rnode[0].clock.offset = 127E-3	# offset initial value

**.rnode[1].clock.sigma1 = 1E-8	# drift noise std
**.rnode[1].clock.drift = 1E-5	# drift initial value

**.rnode[1].clock.sigma2 = 1E-6	# offset noise std
**.rnode[1].clock.offset = 127E-3	# offset initial value

**.rnode[2].clock.sigma1 = 1E-8	# drift noise std
**.rnode[2].clock.drift = 1E-5	# drift initial value

**.rnode[2].clock.sigma2 = 1E-6	# offset noise std
**.rnode[2].clock.offset = 127E-3	# offset initial value

**.rnode[3].clock.sigma1 = 1E-8	# drift noise std
**.rnode[3].clock.drift = 1E-5	# drift initial value

**.rnode[3].clock.sigma2 = 1E-6	# offset noise std
**.rnode[3].clock.offset = 127E-3	# offset initial value

**.rnode[*].clock.sigma3 = 1E-8	# measurement noise std
**.rnode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 3
**.rnode[*].clock.CorrectionAlgorithm = 3

**.**.clock.refractory = 0	# refractory period [s]
# **.mnode.clock.refractory = 1E-4	# refractory period [s]
# **.rnode[*].clock.refractory = 1E-4	# refractory period [s]
# **.snode[*].clock.refractory = 1E-4	# refractory period [s]

**.**.clock.varepsilon = 0	# for classic PCO coupling strength [s]
# **.snode[*].clock.varepsilon = 2E-2	# for classic PCO coupling strength [s]
# **.rnode[*].clock.varepsilon = 2E-2	#  for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 1	# the correction parameter of clock offset
**.snode[*].clock.beta = 5E-1	# the correction parameter of clock skew

**.rnode[*].clock.alpha = 1	# the correction parameter of clock offset
**.rnode[*].clock.beta = 1	# the correction parameter of clock skew

[Config INDIN_CASE1] 
description = "Simulate the 50 snodes to evaluate the performance of PCO in single-hop wireless sensor networks"
# this simulation is to the INDIN of PCO, and the
# network topology is made up of one master, and 50 slave nodes

# configuration of slave drifting clock 
**.snode[0].clock.sigma1 = 1E-9	# drift noise std
**.snode[0].clock.drift = 0E-6	# drift initial value
**.snode[0].clock.sigma2 = 1E-7	# offset noise std
**.snode[0].clock.offset = 10E-3	# offset initial value

**.snode[1].clock.sigma1 = 1E-9	# drift noise std
**.snode[1].clock.drift = 4E-6	# drift initial value
**.snode[1].clock.sigma2 = 1E-7	# offset noise std
**.snode[1].clock.offset = 20E-3	# offset initial value

**.snode[2].clock.sigma1 = 1E-9	# drift noise std
**.snode[2].clock.drift = 8E-6	# drift initial value
**.snode[2].clock.sigma2 = 1E-7	# offset noise std
**.snode[2].clock.offset = 30E-3	# offset initial value

**.snode[3].clock.sigma1 = 1E-9	# drift noise std
**.snode[3].clock.drift = 12E-6	# drift initial value
**.snode[3].clock.sigma2 = 1E-7	# offset noise std
**.snode[3].clock.offset = 40E-3	# offset initial value

**.snode[4].clock.sigma1 = 1E-9	# drift noise std
**.snode[4].clock.drift = 16E-6	# drift initial value
**.snode[4].clock.sigma2 = 1E-7	# offset noise std
**.snode[4].clock.offset = 50E-3	# offset initial value

**.snode[5].clock.sigma1 = 1E-9	# drift noise std
**.snode[5].clock.drift = 20E-6	# drift initial value
**.snode[5].clock.sigma2 = 1E-7	# offset noise std
**.snode[5].clock.offset = 60E-3	# offset initial value

**.snode[6].clock.sigma1 = 1E-9	# drift noise std
**.snode[6].clock.drift = 24E-6	# drift initial value
**.snode[6].clock.sigma2 = 1E-7	# offset noise std
**.snode[6].clock.offset = 70E-3	# offset initial value

**.snode[7].clock.sigma1 = 1E-9	# drift noise std
**.snode[7].clock.drift = 28E-6	# drift initial value
**.snode[7].clock.sigma2 = 1E-7	# offset noise std
**.snode[7].clock.offset = 80E-3	# offset initial value

**.snode[8].clock.sigma1 = 1E-9	# drift noise std
**.snode[8].clock.drift = 32E-6	# drift initial value
**.snode[8].clock.sigma2 = 1E-7	# offset noise std
**.snode[8].clock.offset = 90E-3	# offset initial value

**.snode[9].clock.sigma1 = 1E-9	# drift noise std
**.snode[9].clock.drift = 36E-6	# drift initial value
**.snode[9].clock.sigma2 = 1E-7	# offset noise std
**.snode[9].clock.offset = 100E-3	# offset initial value

**.snode[10].clock.sigma1 = 1E-9	# drift noise std
**.snode[10].clock.drift = 40E-6	# drift initial value
**.snode[10].clock.sigma2 = 1E-7	# offset noise std
**.snode[10].clock.offset = 15E-3	# offset initial value

**.snode[11].clock.sigma1 = 1E-9	# drift noise std
**.snode[11].clock.drift = 44E-6	# drift initial value
**.snode[11].clock.sigma2 = 1E-7	# offset noise std
**.snode[11].clock.offset = 25E-3	# offset initial value

**.snode[12].clock.sigma1 = 1E-9	# drift noise std
**.snode[12].clock.drift = 48E-6	# drift initial value
**.snode[12].clock.sigma2 = 1E-7	# offset noise std
**.snode[12].clock.offset = 35E-3	# offset initial value

**.snode[13].clock.sigma1 = 1E-9	# drift noise std
**.snode[13].clock.drift = 52E-6	# drift initial value
**.snode[13].clock.sigma2 = 1E-7	# offset noise std
**.snode[13].clock.offset = 45E-3	# offset initial value

**.snode[14].clock.sigma1 = 1E-9	# drift noise std
**.snode[14].clock.drift = 56E-6	# drift initial value
**.snode[14].clock.sigma2 = 1E-7	# offset noise std
**.snode[14].clock.offset = 55E-3	# offset initial value

**.snode[15].clock.sigma1 = 1E-9	# drift noise std
**.snode[15].clock.drift = 60E-6	# drift initial value
**.snode[15].clock.sigma2 = 1E-7	# offset noise std
**.snode[15].clock.offset = 65E-3	# offset initial value

**.snode[16].clock.sigma1 = 1E-9	# drift noise std
**.snode[16].clock.drift = 64E-6	# drift initial value
**.snode[16].clock.sigma2 = 1E-7	# offset noise std
**.snode[16].clock.offset = 75E-3	# offset initial value

**.snode[17].clock.sigma1 = 1E-9	# drift noise std
**.snode[17].clock.drift = 68E-6	# drift initial value
**.snode[17].clock.sigma2 = 1E-7	# offset noise std
**.snode[17].clock.offset = 85E-3	# offset initial value

**.snode[18].clock.sigma1 = 1E-9	# drift noise std
**.snode[18].clock.drift = 72E-6	# drift initial value
**.snode[18].clock.sigma2 = 1E-7	# offset noise std
**.snode[18].clock.offset = 95E-3	# offset initial value

**.snode[19].clock.sigma1 = 1E-9	# drift noise std
**.snode[19].clock.drift = 76E-6	# drift initial value
**.snode[19].clock.sigma2 = 1E-7	# offset noise std
**.snode[19].clock.offset = 105E-3	# offset initial value

**.snode[20].clock.sigma1 = 1E-9	# drift noise std
**.snode[20].clock.drift = 80E-6	# drift initial value
**.snode[20].clock.sigma2 = 1E-7	# offset noise std
**.snode[20].clock.offset = 110E-3	# offset initial value

**.snode[21].clock.sigma1 = 1E-9	# drift noise std
**.snode[21].clock.drift = 84E-6	# drift initial value
**.snode[21].clock.sigma2 = 1E-7	# offset noise std
**.snode[21].clock.offset = 120E-3	# offset initial value

**.snode[22].clock.sigma1 = 1E-9	# drift noise std
**.snode[22].clock.drift = 88E-6	# drift initial value
**.snode[22].clock.sigma2 = 1E-7	# offset noise std
**.snode[22].clock.offset = 130E-3	# offset initial value

**.snode[23].clock.sigma1 = 1E-9	# drift noise std
**.snode[23].clock.drift = 92E-6	# drift initial value
**.snode[23].clock.sigma2 = 1E-7	# offset noise std
**.snode[23].clock.offset = 140E-3	# offset initial value

**.snode[24].clock.sigma1 = 1E-9	# drift noise std
**.snode[24].clock.drift = 96E-6	# drift initial value
**.snode[24].clock.sigma2 = 1E-7	# offset noise std
**.snode[24].clock.offset = 150E-3	# offset initial value

**.snode[25].clock.sigma1 = 1E-9	# drift noise std
**.snode[25].clock.drift = 100E-6	# drift initial value
**.snode[25].clock.sigma2 = 1E-7	# offset noise std
**.snode[25].clock.offset = 160E-3	# offset initial value

**.snode[26].clock.sigma1 = 1E-9	# drift noise std
**.snode[26].clock.drift = 3E-6		# drift initial value
**.snode[26].clock.sigma2 = 1E-7	# offset noise std
**.snode[26].clock.offset = 170E-3	# offset initial value

**.snode[27].clock.sigma1 = 1E-9	# drift noise std
**.snode[27].clock.drift = 5E-6		# drift initial value
**.snode[27].clock.sigma2 = 1E-7	# offset noise std
**.snode[27].clock.offset = 180E-3	# offset initial value

**.snode[28].clock.sigma1 = 1E-9	# drift noise std
**.snode[28].clock.drift = 7E-6	# drift initial value
**.snode[28].clock.sigma2 = 1E-7	# offset noise std
**.snode[28].clock.offset = 190E-3	# offset initial value

**.snode[29].clock.sigma1 = 1E-9	# drift noise std
**.snode[29].clock.drift = 9E-6	# drift initial value
**.snode[29].clock.sigma2 = 1E-7	# offset noise std
**.snode[29].clock.offset = 200E-3	# offset initial value

**.snode[30].clock.sigma1 = 1E-8	# drift noise std
**.snode[30].clock.drift = 0E-6		# drift initial value
**.snode[30].clock.sigma2 = 1E-6	# offset noise std
**.snode[30].clock.offset = 10E-3	# offset initial value

**.snode[31].clock.sigma1 = 1E-8	# drift noise std
**.snode[31].clock.drift = 4E-6		# drift initial value
**.snode[31].clock.sigma2 = 1E-6	# offset noise std
**.snode[31].clock.offset = 20E-3	# offset initial value

**.snode[32].clock.sigma1 = 1E-8	# drift noise std
**.snode[32].clock.drift = 8E-6		# drift initial value
**.snode[32].clock.sigma2 = 1E-6	# offset noise std
**.snode[32].clock.offset = 30E-3	# offset initial value

**.snode[33].clock.sigma1 = 1E-8	# drift noise std
**.snode[33].clock.drift = 12E-6	# drift initial value
**.snode[33].clock.sigma2 = 1E-6	# offset noise std
**.snode[33].clock.offset = 40E-3	# offset initial value

**.snode[34].clock.sigma1 = 1E-8	# drift noise std
**.snode[34].clock.drift = 16E-6	# drift initial value
**.snode[34].clock.sigma2 = 1E-6	# offset noise std
**.snode[34].clock.offset = 50E-3	# offset initial value

**.snode[35].clock.sigma1 = 1E-8	# drift noise std
**.snode[35].clock.drift = 20E-6	# drift initial value
**.snode[35].clock.sigma2 = 1E-6	# offset noise std
**.snode[35].clock.offset = 60E-3	# offset initial value

**.snode[36].clock.sigma1 = 1E-8	# drift noise std
**.snode[36].clock.drift = 24E-6	# drift initial value
**.snode[36].clock.sigma2 = 1E-6	# offset noise std
**.snode[36].clock.offset = 70E-3	# offset initial value

**.snode[37].clock.sigma1 = 1E-8	# drift noise std
**.snode[37].clock.drift = 28E-6	# drift initial value
**.snode[37].clock.sigma2 = 1E-6	# offset noise std
**.snode[37].clock.offset = 80E-3	# offset initial value

**.snode[38].clock.sigma1 = 1E-8	# drift noise std
**.snode[38].clock.drift = 32E-6	# drift initial value
**.snode[38].clock.sigma2 = 1E-6	# offset noise std
**.snode[38].clock.offset = 90E-3	# offset initial value

**.snode[39].clock.sigma1 = 1E-8	# drift noise std
**.snode[39].clock.drift = 36E-6	# drift initial value
**.snode[39].clock.sigma2 = 1E-6	# offset noise std
**.snode[39].clock.offset = 100E-3	# offset initial value

**.snode[40].clock.sigma1 = 1E-8	# drift noise std
**.snode[40].clock.drift = 40E-6	# drift initial value
**.snode[40].clock.sigma2 = 1E-6	# offset noise std
**.snode[40].clock.offset = 110E-3	# offset initial value

**.snode[41].clock.sigma1 = 1E-8	# drift noise std
**.snode[41].clock.drift = 44E-6	# drift initial value
**.snode[41].clock.sigma2 = 1E-6	# offset noise std
**.snode[41].clock.offset = 120E-3	# offset initial value

**.snode[42].clock.sigma1 = 1E-8	# drift noise std
**.snode[42].clock.drift = 48E-6	# drift initial value
**.snode[42].clock.sigma2 = 1E-6	# offset noise std
**.snode[42].clock.offset = 130E-3	# offset initial value

**.snode[43].clock.sigma1 = 1E-8	# drift noise std
**.snode[43].clock.drift = 52E-6	# drift initial value
**.snode[43].clock.sigma2 = 1E-6	# offset noise std
**.snode[43].clock.offset = 140E-3	# offset initial value

**.snode[44].clock.sigma1 = 1E-8	# drift noise std
**.snode[44].clock.drift = 56E-6	# drift initial value
**.snode[44].clock.sigma2 = 1E-6	# offset noise std
**.snode[44].clock.offset = 150E-3	# offset initial value

**.snode[45].clock.sigma1 = 1E-8	# drift noise std
**.snode[45].clock.drift = 60E-6	# drift initial value
**.snode[45].clock.sigma2 = 1E-6	# offset noise std
**.snode[45].clock.offset = 160E-3	# offset initial value

**.snode[46].clock.sigma1 = 1E-8	# drift noise std
**.snode[46].clock.drift = 64E-6	# drift initial value
**.snode[46].clock.sigma2 = 1E-6	# offset noise std
**.snode[46].clock.offset = 170E-3	# offset initial value

**.snode[47].clock.sigma1 = 1E-8	# drift noise std
**.snode[47].clock.drift = 68E-6	# drift initial value
**.snode[47].clock.sigma2 = 1E-6	# offset noise std
**.snode[47].clock.offset = 180E-3	# offset initial value

**.snode[48].clock.sigma1 = 1E-8	# drift noise std
**.snode[48].clock.drift = 72E-6	# drift initial value
**.snode[48].clock.sigma2 = 1E-6	# offset noise std
**.snode[48].clock.offset = 190E-3	# offset initial value

**.snode[49].clock.sigma1 = 1E-8	# drift noise std
**.snode[49].clock.drift = 76E-6	# drift initial value
**.snode[49].clock.sigma2 = 1E-6	# offset noise std
**.snode[49].clock.offset = 200E-3	# offset initial value

**.snode[*].clock.sigma3 = 1E-8	# measurement noise std
**.snode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.snode[*].clock.CorrectionAlgorithm = 3

**.**.clock.refractory = 0	# refractory period [s]

**.**.clock.varepsilon = 0	# for classic PCO coupling strength [s]

**.snode[*].clock.alpha = 1	# the correction parameter of clock offset
**.snode[*].clock.beta = 5E-1	# the correction parameter of clock skew

# number of master and slave

*.numMaster = 1	# determine the number of master in the network
*.numSlave = 50	# determine the number of slave in the network

*.mnode*.mobility.initialX = 400m
*.mnode*.mobility.initialY = 400m

*.snode[0].mobility.initialX = 399m
*.snode[0].mobility.initialY = 399m

*.snode[1].mobility.initialX = 399m
*.snode[1].mobility.initialY = 401m

*.snode[2].mobility.initialX = 401m
*.snode[2].mobility.initialY = 401m

*.snode[3].mobility.initialX = 401m
*.snode[3].mobility.initialY = 399m


*.snode[4].mobility.initialX = 398m
*.snode[4].mobility.initialY = 398m

*.snode[5].mobility.initialX = 398m
*.snode[5].mobility.initialY = 402m

*.snode[6].mobility.initialX = 402m
*.snode[6].mobility.initialY = 402m

*.snode[7].mobility.initialX = 402m
*.snode[7].mobility.initialY = 398m


*.snode[8].mobility.initialX = 397m
*.snode[8].mobility.initialY = 397m

*.snode[9].mobility.initialX = 397m
*.snode[9].mobility.initialY = 403m

*.snode[10].mobility.initialX = 403m
*.snode[10].mobility.initialY = 403m

*.snode[11].mobility.initialX = 403m
*.snode[11].mobility.initialY = 397m


*.snode[12].mobility.initialX = 396m
*.snode[12].mobility.initialY = 396m

*.snode[13].mobility.initialX = 396m
*.snode[13].mobility.initialY = 404m

*.snode[14].mobility.initialX = 404m
*.snode[14].mobility.initialY = 404m

*.snode[15].mobility.initialX = 404m
*.snode[15].mobility.initialY = 396m


*.snode[16].mobility.initialX = 395m
*.snode[16].mobility.initialY = 395m

*.snode[17].mobility.initialX = 395m
*.snode[17].mobility.initialY = 405m

*.snode[18].mobility.initialX = 405m
*.snode[18].mobility.initialY = 405m

*.snode[19].mobility.initialX = 405m
*.snode[19].mobility.initialY = 395m


*.snode[20].mobility.initialX = 394m
*.snode[20].mobility.initialY = 394m

*.snode[21].mobility.initialX = 394m
*.snode[21].mobility.initialY = 406m

*.snode[22].mobility.initialX = 406m
*.snode[22].mobility.initialY = 406m

*.snode[23].mobility.initialX = 406m
*.snode[23].mobility.initialY = 394m


*.snode[24].mobility.initialX = 393m
*.snode[24].mobility.initialY = 393m

*.snode[25].mobility.initialX = 393m
*.snode[25].mobility.initialY = 407m

*.snode[26].mobility.initialX = 407m
*.snode[26].mobility.initialY = 407m

*.snode[27].mobility.initialX = 407m
*.snode[27].mobility.initialY = 393m


*.snode[28].mobility.initialX = 392m
*.snode[28].mobility.initialY = 392m

*.snode[29].mobility.initialX = 392m
*.snode[29].mobility.initialY = 408m

*.snode[30].mobility.initialX = 408m
*.snode[30].mobility.initialY = 408m

*.snode[31].mobility.initialX = 408m
*.snode[31].mobility.initialY = 392m


*.snode[32].mobility.initialX = 391m
*.snode[32].mobility.initialY = 391m

*.snode[33].mobility.initialX = 391m
*.snode[33].mobility.initialY = 409m

*.snode[34].mobility.initialX = 409m
*.snode[34].mobility.initialY = 409m

*.snode[35].mobility.initialX = 409m
*.snode[35].mobility.initialY = 391m


*.snode[36].mobility.initialX = 390m
*.snode[36].mobility.initialY = 390m

*.snode[37].mobility.initialX = 390m
*.snode[37].mobility.initialY = 410m

*.snode[38].mobility.initialX = 410m
*.snode[38].mobility.initialY = 410m

*.snode[39].mobility.initialX = 410m
*.snode[39].mobility.initialY = 390m


*.snode[40].mobility.initialX = 389m
*.snode[40].mobility.initialY = 389m

*.snode[41].mobility.initialX = 389m
*.snode[41].mobility.initialY = 411m

*.snode[42].mobility.initialX = 411m
*.snode[42].mobility.initialY = 411m

*.snode[43].mobility.initialX = 411m
*.snode[43].mobility.initialY = 389m


*.snode[44].mobility.initialX = 388m
*.snode[44].mobility.initialY = 388m

*.snode[45].mobility.initialX = 388m
*.snode[45].mobility.initialY = 412m

*.snode[46].mobility.initialX = 412m
*.snode[46].mobility.initialY = 412m

*.snode[47].mobility.initialX = 412m
*.snode[47].mobility.initialY = 388m


*.snode[48].mobility.initialX = 387m
*.snode[48].mobility.initialY = 387m

*.snode[49].mobility.initialX = 387m
*.snode[49].mobility.initialY = 413m


[Config INDIN_CASE2] 
description = "Simulate the 50 snodes to evaluate the performance of PCO in single-hop wireless sensor networks"
# this simulation is to the INDIN of PCO, and the
# network topology is made up of one master, and 50 relay nodes

# configuration of slave drifting clock 
**.rnode[0].clock.sigma1 = 1E-9	# drift noise std
**.rnode[0].clock.drift = 0E-6	# drift initial value
**.rnode[0].clock.sigma2 = 1E-7	# offset noise std
**.rnode[0].clock.offset = 10E-3	# offset initial value

**.rnode[1].clock.sigma1 = 1E-9	# drift noise std
**.rnode[1].clock.drift = 4E-6	# drift initial value
**.rnode[1].clock.sigma2 = 1E-7	# offset noise std
**.rnode[1].clock.offset = 20E-3	# offset initial value

**.rnode[2].clock.sigma1 = 1E-9	# drift noise std
**.rnode[2].clock.drift = 8E-6	# drift initial value
**.rnode[2].clock.sigma2 = 1E-7	# offset noise std
**.rnode[2].clock.offset = 30E-3	# offset initial value

**.rnode[3].clock.sigma1 = 1E-9	# drift noise std
**.rnode[3].clock.drift = 12E-6	# drift initial value
**.rnode[3].clock.sigma2 = 1E-7	# offset noise std
**.rnode[3].clock.offset = 40E-3	# offset initial value

**.rnode[4].clock.sigma1 = 1E-9	# drift noise std
**.rnode[4].clock.drift = 16E-6	# drift initial value
**.rnode[4].clock.sigma2 = 1E-7	# offset noise std
**.rnode[4].clock.offset = 50E-3	# offset initial value

**.rnode[5].clock.sigma1 = 1E-9	# drift noise std
**.rnode[5].clock.drift = 20E-6	# drift initial value
**.rnode[5].clock.sigma2 = 1E-7	# offset noise std
**.rnode[5].clock.offset = 60E-3	# offset initial value

**.rnode[6].clock.sigma1 = 1E-9	# drift noise std
**.rnode[6].clock.drift = 24E-6	# drift initial value
**.rnode[6].clock.sigma2 = 1E-7	# offset noise std
**.rnode[6].clock.offset = 70E-3	# offset initial value

**.rnode[7].clock.sigma1 = 1E-9	# drift noise std
**.rnode[7].clock.drift = 28E-6	# drift initial value
**.rnode[7].clock.sigma2 = 1E-7	# offset noise std
**.rnode[7].clock.offset = 80E-3	# offset initial value

**.rnode[8].clock.sigma1 = 1E-9	# drift noise std
**.rnode[8].clock.drift = 32E-6	# drift initial value
**.rnode[8].clock.sigma2 = 1E-7	# offset noise std
**.rnode[8].clock.offset = 90E-3	# offset initial value

**.rnode[9].clock.sigma1 = 1E-9	# drift noise std
**.rnode[9].clock.drift = 36E-6	# drift initial value
**.rnode[9].clock.sigma2 = 1E-7	# offset noise std
**.rnode[9].clock.offset = 100E-3	# offset initial value

**.rnode[10].clock.sigma1 = 1E-9	# drift noise std
**.rnode[10].clock.drift = 40E-6	# drift initial value
**.rnode[10].clock.sigma2 = 1E-7	# offset noise std
**.rnode[10].clock.offset = 15E-3	# offset initial value

**.rnode[11].clock.sigma1 = 1E-9	# drift noise std
**.rnode[11].clock.drift = 44E-6	# drift initial value
**.rnode[11].clock.sigma2 = 1E-7	# offset noise std
**.rnode[11].clock.offset = 25E-3	# offset initial value

**.rnode[12].clock.sigma1 = 1E-9	# drift noise std
**.rnode[12].clock.drift = 48E-6	# drift initial value
**.rnode[12].clock.sigma2 = 1E-7	# offset noise std
**.rnode[12].clock.offset = 35E-3	# offset initial value

**.rnode[13].clock.sigma1 = 1E-9	# drift noise std
**.rnode[13].clock.drift = 52E-6	# drift initial value
**.rnode[13].clock.sigma2 = 1E-7	# offset noise std
**.rnode[13].clock.offset = 45E-3	# offset initial value

**.rnode[14].clock.sigma1 = 1E-9	# drift noise std
**.rnode[14].clock.drift = 56E-6	# drift initial value
**.rnode[14].clock.sigma2 = 1E-7	# offset noise std
**.rnode[14].clock.offset = 55E-3	# offset initial value

**.rnode[15].clock.sigma1 = 1E-9	# drift noise std
**.rnode[15].clock.drift = 60E-6	# drift initial value
**.rnode[15].clock.sigma2 = 1E-7	# offset noise std
**.rnode[15].clock.offset = 65E-3	# offset initial value

**.rnode[16].clock.sigma1 = 1E-9	# drift noise std
**.rnode[16].clock.drift = 64E-6	# drift initial value
**.rnode[16].clock.sigma2 = 1E-7	# offset noise std
**.rnode[16].clock.offset = 75E-3	# offset initial value

**.rnode[17].clock.sigma1 = 1E-9	# drift noise std
**.rnode[17].clock.drift = 68E-6	# drift initial value
**.rnode[17].clock.sigma2 = 1E-7	# offset noise std
**.rnode[17].clock.offset = 85E-3	# offset initial value

**.rnode[18].clock.sigma1 = 1E-9	# drift noise std
**.rnode[18].clock.drift = 72E-6	# drift initial value
**.rnode[18].clock.sigma2 = 1E-7	# offset noise std
**.rnode[18].clock.offset = 95E-3	# offset initial value

**.rnode[19].clock.sigma1 = 1E-9	# drift noise std
**.rnode[19].clock.drift = 76E-6	# drift initial value
**.rnode[19].clock.sigma2 = 1E-7	# offset noise std
**.rnode[19].clock.offset = 105E-3	# offset initial value

**.rnode[20].clock.sigma1 = 1E-9	# drift noise std
**.rnode[20].clock.drift = 80E-6	# drift initial value
**.rnode[20].clock.sigma2 = 1E-7	# offset noise std
**.rnode[20].clock.offset = 110E-3	# offset initial value

**.rnode[21].clock.sigma1 = 1E-9	# drift noise std
**.rnode[21].clock.drift = 84E-6	# drift initial value
**.rnode[21].clock.sigma2 = 1E-7	# offset noise std
**.rnode[21].clock.offset = 120E-3	# offset initial value

**.rnode[22].clock.sigma1 = 1E-9	# drift noise std
**.rnode[22].clock.drift = 88E-6	# drift initial value
**.rnode[22].clock.sigma2 = 1E-7	# offset noise std
**.rnode[22].clock.offset = 130E-3	# offset initial value

**.rnode[23].clock.sigma1 = 1E-9	# drift noise std
**.rnode[23].clock.drift = 92E-6	# drift initial value
**.rnode[23].clock.sigma2 = 1E-7	# offset noise std
**.rnode[23].clock.offset = 140E-3	# offset initial value

**.rnode[24].clock.sigma1 = 1E-9	# drift noise std
**.rnode[24].clock.drift = 96E-6	# drift initial value
**.rnode[24].clock.sigma2 = 1E-7	# offset noise std
**.rnode[24].clock.offset = 150E-3	# offset initial value

**.rnode[25].clock.sigma1 = 1E-9	# drift noise std
**.rnode[25].clock.drift = 100E-6	# drift initial value
**.rnode[25].clock.sigma2 = 1E-7	# offset noise std
**.rnode[25].clock.offset = 160E-3	# offset initial value

**.rnode[26].clock.sigma1 = 1E-9	# drift noise std
**.rnode[26].clock.drift = 3E-6		# drift initial value
**.rnode[26].clock.sigma2 = 1E-7	# offset noise std
**.rnode[26].clock.offset = 170E-3	# offset initial value

**.rnode[27].clock.sigma1 = 1E-9	# drift noise std
**.rnode[27].clock.drift = 5E-6		# drift initial value
**.rnode[27].clock.sigma2 = 1E-7	# offset noise std
**.rnode[27].clock.offset = 180E-3	# offset initial value

**.rnode[28].clock.sigma1 = 1E-9	# drift noise std
**.rnode[28].clock.drift = 7E-6	# drift initial value
**.rnode[28].clock.sigma2 = 1E-7	# offset noise std
**.rnode[28].clock.offset = 190E-3	# offset initial value

**.rnode[29].clock.sigma1 = 1E-9	# drift noise std
**.rnode[29].clock.drift = 9E-6	# drift initial value
**.rnode[29].clock.sigma2 = 1E-7	# offset noise std
**.rnode[29].clock.offset = 200E-3	# offset initial value

**.rnode[30].clock.sigma1 = 1E-8	# drift noise std
**.rnode[30].clock.drift = 0E-6		# drift initial value
**.rnode[30].clock.sigma2 = 1E-6	# offset noise std
**.rnode[30].clock.offset = 10E-3	# offset initial value

**.rnode[31].clock.sigma1 = 1E-8	# drift noise std
**.rnode[31].clock.drift = 4E-6		# drift initial value
**.rnode[31].clock.sigma2 = 1E-6	# offset noise std
**.rnode[31].clock.offset = 20E-3	# offset initial value

**.rnode[32].clock.sigma1 = 1E-8	# drift noise std
**.rnode[32].clock.drift = 8E-6		# drift initial value
**.rnode[32].clock.sigma2 = 1E-6	# offset noise std
**.rnode[32].clock.offset = 30E-3	# offset initial value

**.rnode[33].clock.sigma1 = 1E-8	# drift noise std
**.rnode[33].clock.drift = 12E-6	# drift initial value
**.rnode[33].clock.sigma2 = 1E-6	# offset noise std
**.rnode[33].clock.offset = 40E-3	# offset initial value

**.rnode[34].clock.sigma1 = 1E-8	# drift noise std
**.rnode[34].clock.drift = 16E-6	# drift initial value
**.rnode[34].clock.sigma2 = 1E-6	# offset noise std
**.rnode[34].clock.offset = 50E-3	# offset initial value

**.rnode[35].clock.sigma1 = 1E-8	# drift noise std
**.rnode[35].clock.drift = 20E-6	# drift initial value
**.rnode[35].clock.sigma2 = 1E-6	# offset noise std
**.rnode[35].clock.offset = 60E-3	# offset initial value

**.rnode[36].clock.sigma1 = 1E-8	# drift noise std
**.rnode[36].clock.drift = 24E-6	# drift initial value
**.rnode[36].clock.sigma2 = 1E-6	# offset noise std
**.rnode[36].clock.offset = 70E-3	# offset initial value

**.rnode[37].clock.sigma1 = 1E-8	# drift noise std
**.rnode[37].clock.drift = 28E-6	# drift initial value
**.rnode[37].clock.sigma2 = 1E-6	# offset noise std
**.rnode[37].clock.offset = 80E-3	# offset initial value

**.rnode[38].clock.sigma1 = 1E-8	# drift noise std
**.rnode[38].clock.drift = 32E-6	# drift initial value
**.rnode[38].clock.sigma2 = 1E-6	# offset noise std
**.rnode[38].clock.offset = 90E-3	# offset initial value

**.rnode[39].clock.sigma1 = 1E-8	# drift noise std
**.rnode[39].clock.drift = 36E-6	# drift initial value
**.rnode[39].clock.sigma2 = 1E-6	# offset noise std
**.rnode[39].clock.offset = 100E-3	# offset initial value

**.rnode[40].clock.sigma1 = 1E-8	# drift noise std
**.rnode[40].clock.drift = 40E-6	# drift initial value
**.rnode[40].clock.sigma2 = 1E-6	# offset noise std
**.rnode[40].clock.offset = 110E-3	# offset initial value

**.rnode[41].clock.sigma1 = 1E-8	# drift noise std
**.rnode[41].clock.drift = 44E-6	# drift initial value
**.rnode[41].clock.sigma2 = 1E-6	# offset noise std
**.rnode[41].clock.offset = 120E-3	# offset initial value

**.rnode[42].clock.sigma1 = 1E-8	# drift noise std
**.rnode[42].clock.drift = 48E-6	# drift initial value
**.rnode[42].clock.sigma2 = 1E-6	# offset noise std
**.rnode[42].clock.offset = 130E-3	# offset initial value

**.rnode[43].clock.sigma1 = 1E-8	# drift noise std
**.rnode[43].clock.drift = 52E-6	# drift initial value
**.rnode[43].clock.sigma2 = 1E-6	# offset noise std
**.rnode[43].clock.offset = 140E-3	# offset initial value

**.rnode[44].clock.sigma1 = 1E-8	# drift noise std
**.rnode[44].clock.drift = 56E-6	# drift initial value
**.rnode[44].clock.sigma2 = 1E-6	# offset noise std
**.rnode[44].clock.offset = 150E-3	# offset initial value

**.rnode[45].clock.sigma1 = 1E-8	# drift noise std
**.rnode[45].clock.drift = 60E-6	# drift initial value
**.rnode[45].clock.sigma2 = 1E-6	# offset noise std
**.rnode[45].clock.offset = 160E-3	# offset initial value

**.rnode[46].clock.sigma1 = 1E-8	# drift noise std
**.rnode[46].clock.drift = 64E-6	# drift initial value
**.rnode[46].clock.sigma2 = 1E-6	# offset noise std
**.rnode[46].clock.offset = 170E-3	# offset initial value

**.rnode[47].clock.sigma1 = 1E-8	# drift noise std
**.rnode[47].clock.drift = 68E-6	# drift initial value
**.rnode[47].clock.sigma2 = 1E-6	# offset noise std
**.rnode[47].clock.offset = 180E-3	# offset initial value

**.rnode[48].clock.sigma1 = 1E-8	# drift noise std
**.rnode[48].clock.drift = 72E-6	# drift initial value
**.rnode[48].clock.sigma2 = 1E-6	# offset noise std
**.rnode[48].clock.offset = 190E-3	# offset initial value

**.rnode[49].clock.sigma1 = 1E-8	# drift noise std
**.rnode[49].clock.drift = 76E-6	# drift initial value
**.rnode[49].clock.sigma2 = 1E-6	# offset noise std
**.rnode[49].clock.offset = 200E-3	# offset initial value

**.rnode[*].clock.sigma3 = 1E-8	# measurement noise std
**.rnode[*].clock.u3= 0	# measurement noise mean

# configuration of interaction mode in classic PCO
# correction algorithm is 1, that means the classic PCO coupling strength to correct the PCO clock state
# correction algorithm is 2, that means the measurement offset to correct the PCO clock state
**.rnode[*].clock.CorrectionAlgorithm = 3

**.**.clock.refractory = 0	# refractory period [s]

**.**.clock.varepsilon = 0	# for classic PCO coupling strength [s]

**.rnode[*].clock.alpha = 1	# the correction parameter of clock offset
**.rnode[*].clock.beta = 1	# the correction parameter of clock skew

# number of master and slave

*.numMaster = 1	# determine the number of master in the network
*.numRelay = 50	# determine the number of relay in the network

*.mnode*.mobility.initialX = 400m
*.mnode*.mobility.initialY = 400m

*.rnode[0].mobility.initialX = 399m
*.rnode[0].mobility.initialY = 399m

*.rnode[1].mobility.initialX = 399m
*.rnode[1].mobility.initialY = 401m

*.rnode[2].mobility.initialX = 401m
*.rnode[2].mobility.initialY = 401m

*.rnode[3].mobility.initialX = 401m
*.rnode[3].mobility.initialY = 399m


*.rnode[4].mobility.initialX = 398m
*.rnode[4].mobility.initialY = 398m

*.rnode[5].mobility.initialX = 398m
*.rnode[5].mobility.initialY = 402m

*.rnode[6].mobility.initialX = 402m
*.rnode[6].mobility.initialY = 402m

*.rnode[7].mobility.initialX = 402m
*.rnode[7].mobility.initialY = 398m


*.rnode[8].mobility.initialX = 397m
*.rnode[8].mobility.initialY = 397m

*.rnode[9].mobility.initialX = 397m
*.rnode[9].mobility.initialY = 403m

*.rnode[10].mobility.initialX = 403m
*.rnode[10].mobility.initialY = 403m

*.rnode[11].mobility.initialX = 403m
*.rnode[11].mobility.initialY = 397m


*.rnode[12].mobility.initialX = 396m
*.rnode[12].mobility.initialY = 396m

*.rnode[13].mobility.initialX = 396m
*.rnode[13].mobility.initialY = 404m

*.rnode[14].mobility.initialX = 404m
*.rnode[14].mobility.initialY = 404m

*.rnode[15].mobility.initialX = 404m
*.rnode[15].mobility.initialY = 396m


*.rnode[16].mobility.initialX = 395m
*.rnode[16].mobility.initialY = 395m

*.rnode[17].mobility.initialX = 395m
*.rnode[17].mobility.initialY = 405m

*.rnode[18].mobility.initialX = 405m
*.rnode[18].mobility.initialY = 405m

*.rnode[19].mobility.initialX = 405m
*.rnode[19].mobility.initialY = 395m


*.rnode[20].mobility.initialX = 394m
*.rnode[20].mobility.initialY = 394m

*.rnode[21].mobility.initialX = 394m
*.rnode[21].mobility.initialY = 406m

*.rnode[22].mobility.initialX = 406m
*.rnode[22].mobility.initialY = 406m

*.rnode[23].mobility.initialX = 406m
*.rnode[23].mobility.initialY = 394m


*.rnode[24].mobility.initialX = 393m
*.rnode[24].mobility.initialY = 393m

*.rnode[25].mobility.initialX = 393m
*.rnode[25].mobility.initialY = 407m

*.rnode[26].mobility.initialX = 407m
*.rnode[26].mobility.initialY = 407m

*.rnode[27].mobility.initialX = 407m
*.rnode[27].mobility.initialY = 393m


*.rnode[28].mobility.initialX = 392m
*.rnode[28].mobility.initialY = 392m

*.rnode[29].mobility.initialX = 392m
*.rnode[29].mobility.initialY = 408m

*.rnode[30].mobility.initialX = 408m
*.rnode[30].mobility.initialY = 408m

*.rnode[31].mobility.initialX = 408m
*.rnode[31].mobility.initialY = 392m


*.rnode[32].mobility.initialX = 391m
*.rnode[32].mobility.initialY = 391m

*.rnode[33].mobility.initialX = 391m
*.rnode[33].mobility.initialY = 409m

*.rnode[34].mobility.initialX = 409m
*.rnode[34].mobility.initialY = 409m

*.rnode[35].mobility.initialX = 409m
*.rnode[35].mobility.initialY = 391m


*.rnode[36].mobility.initialX = 390m
*.rnode[36].mobility.initialY = 390m

*.rnode[37].mobility.initialX = 390m
*.rnode[37].mobility.initialY = 410m

*.rnode[38].mobility.initialX = 410m
*.rnode[38].mobility.initialY = 410m

*.rnode[39].mobility.initialX = 410m
*.rnode[39].mobility.initialY = 390m


*.rnode[40].mobility.initialX = 389m
*.rnode[40].mobility.initialY = 389m

*.rnode[41].mobility.initialX = 389m
*.rnode[41].mobility.initialY = 411m

*.rnode[42].mobility.initialX = 411m
*.rnode[42].mobility.initialY = 411m

*.rnode[43].mobility.initialX = 411m
*.rnode[43].mobility.initialY = 389m


*.rnode[44].mobility.initialX = 388m
*.rnode[44].mobility.initialY = 388m

*.rnode[45].mobility.initialX = 388m
*.rnode[45].mobility.initialY = 412m

*.rnode[46].mobility.initialX = 412m
*.rnode[46].mobility.initialY = 412m

*.rnode[47].mobility.initialX = 412m
*.rnode[47].mobility.initialY = 388m


*.rnode[48].mobility.initialX = 387m
*.rnode[48].mobility.initialY = 387m

*.rnode[49].mobility.initialX = 387m
*.rnode[49].mobility.initialY = 413m