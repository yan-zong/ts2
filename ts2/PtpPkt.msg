//**************************************************************************
// * file:        PtpPkt.msg
// *
// * author:      Xuewu Dai
// *
// * copyright:   (C) 2014 Southwest University, Chongqing, China
// *
// *              This program is free software; you can redistribute it 
// *              and/or modify it under the terms of the GNU General Public 
// *              License as published by the Free Software Foundation; either
// *              version 2 of the License, or (at your option) any later 
// *              version.
// *              For further information see file COPYING 
// *              in the top level directory
// **************************************************************************
// * part of:     framework implementation developed by tkn
// * description: - base class for network layer packets
// *              - subclass to create your own network layer packets
// **************************************************************************/

cplusplus {{
    #include "SimpleAddress.h"
}}

class LAddress::L3Type extends void;

// A basic network layer packet definition
//
// subclass if you want to create your own network layer packet class
//
// The basic network packet contains a destination and source network address.
// Additionally a time to live (ttl) field can be defined in order to limit the
// maximum number of hops the messge will travel. The sequence number is guranteed
// to be unique for all packets generated by one host
//
// @author Xuewu Dai
packet PtpPkt
{
    // packet (inheritaged from mixim.src.base.message.NetwPkt.msg)
    // TODO: the L3Type address (destAddr, srcAddr) have the same function as the fields of source, destination
    //       get rid of the L3Type address to keep the codes neat.   
    LAddress::L3Type destAddr;   // destination address, use the L3 address format 
    LAddress::L3Type srcAddr;    // source address, use the L3 address format
    
    int              ttl = 1;    // time to live field (IP)
    unsigned long    seqNum = 0; // sequence number
    
    // fields inheritaged from TSim.Packet.msg
   // int pckType;   // not used in TS2, keep for compatibility with Packet.msg. TODO: remove it.
   // int clockType;  // not used in TS2, keep for compatity with Packet.msg. TODO: remove it
    int ptpType;    // see definitions in constant.h
    int source;        // node's index + addressoffset
    int destination;   // node's index + addressoffset
    double data;   //store time stampe
    
    //When ptpCore puts a (software) time tampe on a packet, hdwr_tsRxTx is set to false
    //when PtpTimeStmp module puts a (hardware) TS on the packet, hdwr_tsRxTx is set to true
    //At receiving, ptpCore checks hardwareTS status and decides which receiving tims
    //   stamp should be used. If hdwr_tsRxTx==true, then use the packet's tsTX and tsRX
    //   if hdwr_tsRxTx==false, then use the packet's tsTX as the tx time stamp, but use the
    //    current as the receiving time stamp.
    bool hdwr_tsRxTx;      
    
    double tsRx;   // transmission time stamp 
    double tsTx;   // receiving time stamp
    // store the four time stamps for present time synchronization
    double ts1_SYNC; // ts1 by mastter on SYNC packet
    double ts2_SYNC; // ts2 by slave on SYNC packe
    double ts3_DREQ; // ts3 by slave on DREQ
    double ts4_DREQ; // ts4 by maser on DREQ
     
}

